from PDFCreator import createPowerPoint
from TextExtractor import articleDissasembler


# Usage example

a = articleDissasembler("DesignDocument.pdf")
a.extractTextAndImages()
a.extractTables()
    
# b = a.summarize_pdf(a.text)

d = ['Article to Powerpoint Converter is a software that will convert a PDF article into a powerpoint presentation . the target consumer is anyone who needs a succinct way to give an overview of their work .', 'the environment will be a folder of classes on Github . the user will have to download the needed apis to run the script . it will also allow for our code to be taken and used by others .', 'our product must be able to extract as much data as possible from the article to create an accurate overview of it in a powerpoint format . the main four types of data that need to be extracted are text, tables, images and equations .', 'the system needs to be able to find the images, tables and equations . Once found the system will extract the data and organize them in a way that can be correlated to the text .', 'all required data will be extracted from the article in a way that can be used in the code . this is essentially making sure that the text aligns with the images and that the powerpoint can be produced in an order that makes sense .', 'extract_objects() class is used to extract images, equations and tables from the article . it will populate all these attributes as a 3D array . outer list will be the page that the piece of data is on .', 'extract_text() function is used to extract the actual text of the article into string formatting stored in one large string . this function will keep the index of where the page ends and divide that by 1024 letters which is the length of the summaries created .', 'extract_content class will be used to create a powerpoint presentation . the attributes of this class are the file name of the output presentation and a link to the powerpoint that the functions can use to reference it .', 'the position of the image, equation and table slides will be after the last summary corresponding to its page . this makes sure they are in the relative area of their corresponding text . slides can be moved around easily after the powerpoint is created by the user .', 'extract_objects() Functions - extract_text(self):null Loops through the article and extracts the images, equations and tables . put them in their respective attributes .', 'formats and add the respective text . Put the slide behind the summary of the corresponding page . Interactions This sequence diagram shows how the script will run from start to finish and the order in which each function will be called.', 'create_powerpoint class will automatically create a blank powerpoint . this will be done first because where we put the image, table and equation slides relies on the corresponding text slides . after the summary slides are created, the data type slides will be created .', 'the code saw the regular text as a table . this resulted in a combined table and text extraction . it would be too time consuming to make sure the system works for every formatting method .', 'ded that 1024 was a good number as it gives us enough content to summarize in one slide and will make around 2-3 slides per page . a whole page is too much to summarize on one slide; this would lead to vague and convoluted slides .', 'when extracting the text we figure out where each page ends corresponding to the summaries using the formula len (end of page)/1024 . this is not perfect as the items are not in the exact position they need to be .', 'the system is very slow, taking several minutes to run if the article is larger than 10 pages . the part of the system that is slowing it down is the summarization of the text .', 'PDF Extract_images Extract_content extract_objetc s() REQ-02 Extract tables from PDF Extract tables . .']
c = createPowerPoint("test.pptx")
c.add_slides(d, a.images, a.tables, a.endOfPage)
